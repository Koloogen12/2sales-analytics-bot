"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from models import Manager
from metrics_service import metrics_service
from google_sheets_service import google_sheets_service
from config import config

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


class RegistrationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    waiting_for_name = State()


# ================ –ö–û–ú–ê–ù–î–´ ================

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    manager = await Manager.get_or_none(telegram_user_id=user_id)
    
    if manager:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {manager.full_name}!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, "
            "–∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–∞—à–∏—Ö –º–µ—Ç—Ä–∏–∫.\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ /test_export - —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ç–∞–±–ª–∏—Ü—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥–∞–∂!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register"
        )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
ü§ñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ

2Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω –∫—É–ø–∏–ª mpstats –∑–∞ 2000—Ä"
‚Ä¢ "–ü—Ä–æ–¥–ª–∏–ª –ü–µ—Ç—Ä–æ–≤ wildberries + marketguru, 3500—Ä"
‚Ä¢ "–û—Ç–∫–∞–∑ –æ—Ç –°–∏–¥–æ—Ä–æ–≤–∞, –Ω–µ –ø–æ–¥–æ—à–ª–∞ —Ü–µ–Ω–∞"
‚Ä¢ "–í—ã–¥–∞–ª –±–æ–Ω—É—Å 500—Ä –∫–ª–∏–µ–Ω—Ç—É –ö–æ–∑–ª–æ–≤—É"
‚Ä¢ "–ü–æ–ª—É—á–∏–ª –æ—Ç–∑—ã–≤ –æ—Ç –ê–Ω–¥—Ä–µ–µ–≤–∞ - –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω"
‚Ä¢ "–ù–∞–ø–∏—Å–∞–ª 5 –Ω–æ–≤–∏—á–∫–∞–º"
‚Ä¢ "–†–∞–∑–æ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ 10 –∫–ª–∏–µ–Ω—Ç–∞–º"

3Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ —Å—É–º–º–µ
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –í–µ–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

4Ô∏è‚É£ –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã)

üìä –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:55 –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Google –¢–∞–±–ª–∏—Ü—É.
    """
    await message.answer(help_text)


@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /register"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    existing_manager = await Manager.get_or_none(telegram_user_id=user_id)
    if existing_manager:
        await message.answer(f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {existing_manager.full_name}")
        return
    
    await message.answer(
        "üìù –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
    )
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(RegistrationStates.waiting_for_name)
async def process_registration_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    full_name = message.text.strip()
    username = message.from_user.username
    
    if len(full_name) < 3:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = await Manager.create(
            telegram_user_id=user_id,
            full_name=full_name,
            username=username
        )
        
        await message.answer(
            f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë§ –í–∞—à–µ –∏–º—è: {full_name}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, "
            "–∏ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –º–µ—Ç—Ä–∏–∫.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n"
            "\"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ü–µ—Ç—Ä –∫—É–ø–∏–ª mpstats –∑–∞ 1500—Ä\""
        )
        
        await state.clear()
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {full_name} (ID: {user_id})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = message.from_user.id
    
    manager = await Manager.get_or_none(telegram_user_id=user_id)
    if not manager:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    
    try:
        stats_text = await metrics_service.format_daily_stats(manager)
        await message.answer(stats_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("test_export"))
async def cmd_test_export(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /test_export - —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    
    if user_id != config.admin_chat_id:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        await message.answer("üì§ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        all_metrics = await metrics_service.get_all_managers_metrics_today()
        
        if not all_metrics:
            await message.answer("üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
        success = await google_sheets_service.export_daily_metrics(all_metrics)
        
        if success:
            await message.answer(
                f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_metrics)}\n"
                f"üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(set(m.manager.full_name for m in all_metrics))}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("reset_stats"))
async def cmd_reset_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /reset_stats - —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    
    if user_id != config.admin_chat_id:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        managers = await Manager.all()
        reset_count = 0
        
        for manager in managers:
            success = await metrics_service.reset_manager_metrics(manager)
            if success:
                reset_count += 1
        
        await message.answer(
            f"‚úÖ –°–±—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {reset_count} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
            f"üìä –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω—É–ª–µ–Ω—ã"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("check_connection"))
async def cmd_check_connection(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /check_connection - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    
    if user_id != config.admin_chat_id:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets...")
        
        success = await google_sheets_service.check_connection()
        
        if success:
            last_date = await google_sheets_service.get_last_export_date()
            await message.answer(
                f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç: {last_date or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# ================ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ================

@router.message(F.text & ~F.text.startswith("/"))
async def process_manager_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    manager = await Manager.get_or_none(telegram_user_id=user_id)
    if not manager:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if not manager.is_active:
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        result = await metrics_service.process_manager_message(manager, message.text)
        
        if result["success"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(result["confirmation"])
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if config.debug:
                parsed_data = result.get("parsed_data", {})
                confidence = parsed_data.get("confidence", 0)
                if confidence < 0.7:
                    await message.answer(
                        f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {confidence:.0%}\n"
                        f"–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã, –æ–ø–∏—à–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
                    )
        else:
            # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await message.answer(result["confirmation"])
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
            await message.answer(
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω –∫—É–ø–∏–ª mpstats –∑–∞ 2000—Ä\"\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤."
            )
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


# ================ –û–ë–†–ê–ë–û–¢–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ================

@router.message(F.photo)
async def process_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await message.answer(
        "üì∑ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–û–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ."
    )


@router.message(F.document)
async def process_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    await message.answer(
        "üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–û–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
    )


@router.message(F.voice)
async def process_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ."
    )


# ================ –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î ================

@router.message(F.text.startswith("/"))
async def unknown_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."
    )


# ================ MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ================

@router.message.middleware()
async def logging_middleware(handler, event: Message, data: dict):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = event.from_user.id
    username = event.from_user.username
    text = event.text or f"[{event.content_type}]"
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (@{username}): {text[:100]}")
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    return await handler(event, data)