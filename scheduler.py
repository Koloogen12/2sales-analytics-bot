"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫
"""
import logging
import asyncio
from datetime import datetime, time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import config
from metrics_service import metrics_service
from google_sheets_service import google_sheets_service
from models import Manager
from notification_service import notification_service

logger = logging.getLogger(__name__)


class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self._setup_jobs()
    
    def _setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            hour, minute = map(int, config.daily_export_time.split(":"))
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
            self.scheduler.add_job(
                func=self.daily_export_job,
                trigger=CronTrigger(hour=hour, minute=minute),
                id="daily_export",
                name="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫",
                replace_existing=True
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è (–∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞)
            notification_hour = hour
            notification_minute = minute - 30
            if notification_minute < 0:
                notification_minute += 60
                notification_hour -= 1
                if notification_hour < 0:
                    notification_hour = 23
            
            self.scheduler.add_job(
                func=self.daily_reminder_job,
                trigger=CronTrigger(hour=notification_hour, minute=notification_minute),
                id="daily_reminder",
                name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–Ω—è",
                replace_existing=True
            )
            
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00)
            self.scheduler.add_job(
                func=self.weekly_stats_job,
                trigger=CronTrigger(day_of_week=6, hour=20, minute=0),  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                id="weekly_stats",
                name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                replace_existing=True
            )
            
            logger.info(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
            logger.info(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {config.daily_export_time}")
            logger.info(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {notification_hour:02d}:{notification_minute:02d}")
            logger.info(f"üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    async def daily_export_job(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
        try:
            logger.info("üïí –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            all_metrics = await metrics_service.get_all_managers_metrics_today()
            
            if not all_metrics:
                logger.info("üìã –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
                await notification_service.notify_admin(
                    "üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
                )
                return
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
            success = await google_sheets_service.export_daily_metrics(all_metrics)
            
            if success:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                total_managers = len(set(m.manager.full_name for m in all_metrics))
                total_revenue = sum(m.total_revenue for m in all_metrics)
                total_clients = sum(m.new_clients + m.active_clients for m in all_metrics)
                
                success_message = (
                    f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%Y-%m-%d')}:\n"
                    f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {total_managers}\n"
                    f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f}‚ÇΩ\n"
                    f"ü§ù –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
                    f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_metrics)}"
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await notification_service.notify_admin(success_message)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
                for metrics in all_metrics:
                    if metrics.manager.is_active:
                        await notification_service.notify_manager(
                            metrics.manager,
                            f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É!\n"
                            f"üí∞ –í–∞—à–∞ –≤—ã—Ä—É—á–∫–∞: {metrics.total_revenue:,.0f}‚ÇΩ\n"
                            f"ü§ù –ö–ª–∏–µ–Ω—Ç–æ–≤: {metrics.new_clients + metrics.active_clients}"
                        )
                
                logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(all_metrics)} –∑–∞–ø–∏—Å–µ–π")
                
            else:
                error_message = "‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets"
                await notification_service.notify_admin(error_message)
                logger.error(error_message)
                
        except Exception as e:
            error_message = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"
            logger.error(error_message)
            await notification_service.notify_admin(error_message)
    
    async def daily_reminder_job(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
        try:
            logger.info("üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            managers = await Manager.filter(is_active=True)
            
            for manager in managers:
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    stats_text = await metrics_service.format_daily_stats(manager)
                    
                    reminder_text = (
                        f"üîî –°–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!\n\n"
                        f"–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç (–≤ {config.daily_export_time}) "
                        f"–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
                        f"{stats_text}\n\n"
                        f"üí° –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –Ω–µ—É—á—Ç–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –æ–ø–∏—à–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Å!"
                    )
                    
                    await notification_service.notify_manager(manager, reminder_text)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {manager.full_name}: {e}")
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(managers)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def weekly_stats_job(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            logger.info("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–±–æ—Ä–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
            await notification_service.notify_admin(
                "üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "üìä –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google –¢–∞–±–ª–∏—Ü—É.\n"
                f"üîó –°—Å—ã–ª–∫–∞: https://docs.google.com/spreadsheets/d/{config.google_sheet_id}"
            )
            
            logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self.scheduler.start()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            jobs = self.scheduler.get_jobs()
            for job in jobs:
                next_run = job.next_run_time
                if next_run:
                    logger.info(f"üìÖ {job.name}: {next_run.strftime('%Y-%m-%d %H:%M:%S')}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self.scheduler.shutdown()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def manual_export(self) -> bool:
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            logger.info("üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞")
            await self.daily_export_job()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False
    
    def get_next_export_time(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            export_job = self.scheduler.get_job("daily_export")
            if export_job and export_job.next_run_time:
                return export_job.next_run_time.strftime("%Y-%m-%d %H:%M:%S")
            return "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return "–û—à–∏–±–∫–∞"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service = SchedulerService()
