"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
"""
import logging
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from config import config
from models import Manager

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.bot = Bot(token=config.telegram_token)
    
    async def notify_manager(self, manager: Manager, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        
        Args:
            manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=manager.telegram_user_id,
                text=message,
                parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            )
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {manager.full_name}")
            return True
            
        except TelegramForbiddenError:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {manager.full_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager.is_active = False
            await manager.save()
            
            return False
            
        except TelegramBadRequest as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API –¥–ª—è {manager.full_name}: {e}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {manager.full_name}: {e}")
            return False
    
    async def notify_admin(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=config.admin_chat_id,
                text=f"üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n{message}",
                parse_mode=None
            )
            
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            return False
    
    async def broadcast_to_all_managers(self, message: str) -> dict:
        """
        –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        """
        managers = await Manager.filter(is_active=True)
        
        success_count = 0
        failed_count = 0
        blocked_count = 0
        
        for manager in managers:
            try:
                await self.bot.send_message(
                    chat_id=manager.telegram_user_id,
                    text=message,
                    parse_mode=None
                )
                success_count += 1
                
            except TelegramForbiddenError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                blocked_count += 1
                manager.is_active = False
                await manager.save()
                
            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {manager.full_name}: {e}")
        
        stats = {
            "total": len(managers),
            "success": success_count,
            "failed": failed_count,
            "blocked": blocked_count
        }
        
        logger.info(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        await self.notify_admin(
            f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['total']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats['success']}\n"
            f"‚Ä¢ –û—à–∏–±–∫–∏: {stats['failed']}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {stats['blocked']}"
        )
        
        return stats
    
    async def send_system_status(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_managers = await Manager.filter(is_active=True).count()
            total_all_managers = await Manager.all().count()
            
            status_message = (
                f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {total_managers}\n"
                f"üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_all_managers}\n"
                f"ü§ñ –ë–æ—Ç: –†–∞–±–æ—Ç–∞–µ—Ç\n"
                f"üìä Google Sheets: {'‚úÖ' if await self._check_sheets_connection() else '‚ùå'}\n"
                f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ê–∫—Ç–∏–≤–µ–Ω"
            )
            
            return await self.notify_admin(status_message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    async def _check_sheets_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets"""
        try:
            from google_sheets_service import google_sheets_service
            return await google_sheets_service.check_connection()
        except Exception:
            return False
    
    async def send_error_notification(self, error_type: str, error_message: str, manager: Manager = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            error_message: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            manager: –ú–µ–Ω–µ–¥–∂–µ—Ä (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            notification_text = f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
            notification_text += f"üîç –¢–∏–ø: {error_type}\n"
            notification_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {error_message}\n"
            
            if manager:
                notification_text += f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager.full_name} (ID: {manager.telegram_user_id})\n"
            
            notification_text += f"‚è∞ –í—Ä–µ–º—è: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            return await self.notify_admin(notification_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
        try:
            await self.bot.session.close()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService()
